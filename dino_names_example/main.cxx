#include "hardware/i2c.h"
#include "pico/stdlib.h"
#include <Dense>
#include <cstdlib>
#include <ctime>
#include <stdint.h>
#include <stdio.h>
#include <string>
extern "C" {
#include "ssd1306.h"
}
using namespace Eigen;

MatrixXd W_x(1, 16);
MatrixXd Wh_x(16, 16);
MatrixXd rnn_bias(1, 16);
MatrixXd dense_weights(16, 27);
MatrixXd dense_bias(1, 27);
char chars[] = {'\n', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',
                'i',  'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',
                'r',  's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};

void load_weights() {

  W_x << 3.3970773220062256, -4.835897445678711, -2.5763604640960693,
      -0.4682621657848358, 1.2734524011611938, -1.8394315242767334,
      0.4608069658279419, 1.2426341772079468, -0.23307445645332336,
      -0.39731353521347046, 2.565042018890381, 0.27963748574256897,
      2.009381055831909, -1.19717538356781, 0.21316371858119965,
      -1.1415314674377441;

  Wh_x << 0.19629642367362976, 0.05424417555332184, 0.7558563351631165,
      1.0545790195465088, 0.5863524675369263, -0.3905900716781616,
      -0.726567804813385, -2.7814388275146484, 1.0069215297698975,
      0.6192643046379089, -0.27040204405784607, 0.46928638219833374,
      -1.6313813924789429, 1.1393128633499146, -0.9814464449882507,
      -0.3545934557914734, -0.15185295045375824, 0.25813230872154236,
      0.6243473291397095, 0.33029526472091675, 0.7482629418373108,
      -0.4765210449695587, -0.2550748586654663, 1.8817675113677979,
      0.2820243537425995, 0.7701018452644348, 0.42309173941612244,
      -0.07955462485551834, -0.0158074963837862, -0.179098442196846,
      -1.0223513841629028, 0.29940536618232727, -0.2323913425207138,
      -0.06990747898817062, 0.8686920404434204, -0.4618116617202759,
      -0.6462022066116333, -0.08188240975141525, -0.22681748867034912,
      0.3069743514060974, -0.3030264377593994, -0.21753565967082977,
      -0.10037315636873245, -0.13329829275608063, 0.19735759496688843,
      0.16505607962608337, 0.47807684540748596, 0.03230474516749382,
      0.462396502494812, -0.46562719345092773, -0.22991441190242767,
      0.9220798015594482, 1.1722767353057861, 0.271842360496521,
      0.6105964779853821, 0.638776957988739, 0.9104269742965698,
      -0.07913708686828613, 0.09247905761003494, -0.5516446828842163,
      -0.28018200397491455, 0.5162454843521118, 0.437049001455307,
      -0.23826102912425995, -0.2876394987106323, 0.47848159074783325,
      0.7465999722480774, 0.07616975158452988, -0.14876964688301086,
      -0.11137305200099945, 0.2671125531196594, -0.6998187899589539,
      0.48153018951416016, -0.24932780861854553, -0.705777108669281,
      -0.5420982837677002, 0.06717570126056671, -0.11538538336753845,
      0.2946089208126068, -0.15382122993469238, 0.08658723533153534,
      0.10121513903141022, 0.7220740914344788, 0.19562548398971558,
      -0.29298967123031616, -1.2559312582015991, -0.8241055607795715,
      -0.2292148470878601, -0.06590210646390915, -0.15726664662361145,
      0.021052846685051918, 0.14309129118919373, -0.08829745650291443,
      -0.1371912956237793, 0.6930629014968872, -0.06386888772249222,
      -0.14185413718223572, -0.27630534768104553, 0.02628145180642605,
      -0.0699005275964737, 0.30555105209350586, -0.3218531906604767,
      -0.3447272777557373, 0.5332934260368347, -0.30566415190696716,
      -0.6198975443840027, -0.09436208009719849, -0.3144521415233612,
      -0.44441795349121094, -0.22200384736061096, 0.005710328463464975,
      -0.2128741443157196, 0.5232171416282654, 0.3848848044872284,
      0.05129225179553032, 0.8882931470870972, -0.9187780022621155,
      -0.5401224493980408, -0.4315265715122223, 0.6956284046173096,
      -0.04564834013581276, -1.4708529710769653, 1.139078974723816,
      0.16940586268901825, -0.36588430404663086, 0.5105952620506287,
      -0.5678720474243164, 0.6728567481040955, 0.1671118587255478,
      0.38675713539123535, 0.3334820568561554, -0.05386243760585785,
      -0.8169987797737122, -1.372009515762329, 0.035213399678468704,
      0.12856976687908173, -0.07609239220619202, 0.277111679315567,
      0.3073287308216095, 0.09162469953298569, 0.436902791261673,
      -0.39665019512176514, 0.5950456261634827, -0.16071128845214844,
      -0.18708504736423492, -0.5006240606307983, -0.26438048481941223,
      -1.2573603391647339, 0.14711153507232666, 0.4816370904445648,
      0.6030431985855103, 0.38544780015945435, 0.01487700641155243,
      -0.7869439721107483, -0.373859703540802, 0.15182088315486908,
      0.2702169418334961, -0.034245144575834274, 0.2545618414878845,
      -0.1525077223777771, 0.48360100388526917, -0.4383985102176666,
      -0.7510761022567749, -0.6541298627853394, 0.06283555924892426,
      -1.9189924001693726, 0.2846239507198334, -0.5169076323509216,
      0.4483303427696228, 0.20909175276756287, 0.5828668475151062,
      -0.6192837357521057, -0.3166579008102417, 0.314648300409317,
      -0.0805390402674675, 0.6086846590042114, 0.03976302593946457,
      0.0009248086716979742, 1.3326189517974854, -0.23849722743034363,
      -1.0531034469604492, 1.6239784955978394, -0.06361749768257141,
      -1.1739147901535034, 0.10300356149673462, 0.10999137163162231,
      -0.28157058358192444, 0.8727846145629883, 0.43632054328918457,
      -0.09788006544113159, -0.23942291736602783, 0.8365525603294373,
      0.1651856005191803, -0.18255358934402466, 0.678087055683136,
      -0.4684081971645355, -0.35983845591545105, 1.409397840499878,
      -0.6366693377494812, -1.9909619092941284, -0.06071968376636505,
      0.29241564869880676, -0.047592587769031525, 0.04908977448940277,
      -0.18343210220336914, 0.02227052114903927, -0.06039169430732727,
      0.4741845726966858, -0.042018596082925797, -0.19401352107524872,
      0.2662506699562073, 0.4549200236797333, 0.18687646090984344,
      -0.1718987375497818, 0.3478175699710846, 0.676852285861969,
      0.8741421103477478, -0.6033939123153687, -0.5037158131599426,
      -0.11026471853256226, -0.02554428204894066, 0.3104759752750397,
      -0.23668107390403748, 0.3362536132335663, 0.10136746615171432,
      -0.003280105534940958, 0.25907352566719055, 0.42216190695762634,
      0.639606773853302, 0.2645927369594574, 0.7605590224266052,
      0.5254494547843933, 0.1768985539674759, 0.6588935852050781,
      -0.3374478220939636, -0.44058459997177124, -0.621666669845581,
      -0.29157188534736633, -0.3122333884239197, -0.15312866866588593,
      0.07920783758163452, -0.0695958137512207, 0.8044772744178772,
      -0.5148010849952698, -1.0541802644729614, 2.1865415573120117,
      0.9289665222167969, 1.3329261541366577, -0.13955673575401306,
      0.29241472482681274, 0.3700639307498932, -0.41861075162887573,
      1.040702223777771, -0.6998044848442078, 0.5642818808555603,
      1.0119773149490356;

  rnn_bias << -0.34355419874191284, 0.087559774518013, 0.39032018184661865,
      -0.2271098494529724, -0.13542595505714417, 0.5072042346000671,
      -0.22122779488563538, -0.5242670178413391, -0.34174713492393494,
      0.1293933242559433, -0.06343823671340942, 0.08415019512176514,
      0.44490647315979004, -0.12925182282924652, -0.15206965804100037,
      0.36509042978286743;

  dense_weights << -0.8127280473709106, 0.9793148636817932,
      -0.27630946040153503, 0.9365805387496948, 0.4628310799598694,
      -0.043983086943626404, -1.082790493965149, 1.0268681049346924,
      0.40882638096809387, 0.40483638644218445, -0.3640719950199127,
      0.21503685414791107, 0.050975602120161057, -0.08188419789075851,
      0.26324719190597534, 0.20937541127204895, -0.10573191195726395,
      -0.415979266166687, 0.3595190644264221, 0.6123120784759521,
      0.20079252123832703, -1.680336356163025, 0.12365040928125381,
      -0.7536848783493042, -0.13130922615528107, 0.0659530982375145,
      -0.08448562771081924, -1.2996306419372559, 0.21031412482261658,
      0.984731912612915, 0.9312723875045776, 0.49566471576690674,
      -0.48304110765457153, 0.5883358120918274, 0.8178607821464539,
      0.6521174907684326, -0.7049694657325745, 0.8616935610771179,
      1.06708562374115, 0.6818305253982544, 0.5586327314376831,
      -0.4547377824783325, -1.132806420326233, 0.22590647637844086,
      1.1880886554718018, 0.6488697528839111, -0.01709318719804287,
      -0.006208071950823069, -2.076786518096924, 0.2834237813949585,
      0.6756221652030945, 0.7550532221794128, -0.27511003613471985,
      0.9891868829727173, -1.926607608795166, 0.6008391380310059,
      0.8259994983673096, 0.9277743697166443, 1.0930883884429932,
      0.5434737801551819, 0.38787904381752014, 1.172641396522522,
      0.5441766381263733, 0.6729857921600342, 0.7732686400413513,
      0.18921107053756714, -0.5719101428985596, 0.5724846124649048,
      0.28205421566963196, 0.2758317291736603, 0.7237613797187805,
      -0.03488670662045479, -2.5326662063598633, -0.46148988604545593,
      -0.3223378658294678, 0.04145142063498497, 0.66802978515625,
      -0.4073188304901123, -0.740805447101593, 0.4648021161556244,
      0.16951461136341095, 0.641523003578186, -0.46205851435661316,
      -0.01909843273460865, -0.7782690525054932, 0.115502268075943,
      -0.3338758945465088, 0.2909213900566101, 0.07197534292936325,
      -0.9550272226333618, -0.15681809186935425, 0.0067089637741446495,
      -0.30153900384902954, 0.3251922130584717, 0.12729889154434204,
      0.6127361059188843, -0.15554097294807434, -0.8697823882102966,
      0.6307908296585083, -0.9082044363021851, -0.3177534341812134,
      -0.2641999423503876, 1.137635588645935, 0.16517123579978943,
      0.03962445259094238, 0.06336049735546112, 0.3302582800388336,
      0.43026453256607056, 1.4506462812423706, -0.10675962269306183,
      0.2688872218132019, 0.34161993861198425, 0.04390997439622879,
      -0.21683011949062347, -0.19055265188217163, -0.2814623713493347,
      -0.11789213865995407, -0.4741535186767578, -0.007148275151848793,
      0.30378586053848267, -0.20924758911132812, -0.10970984399318695,
      -0.17919021844863892, -1.1012253761291504, -0.2794201076030731,
      -0.28235718607902527, -0.08794146031141281, 0.49431559443473816,
      -1.167345404624939, -0.8991345763206482, -0.42148104310035706,
      0.03157415613532066, 0.9224699139595032, -0.2538200318813324,
      -0.4015370011329651, 0.9698572754859924, 0.421049028635025,
      0.05454275384545326, -0.13953515887260437, -0.13865594565868378,
      0.24262559413909912, -0.3224341571331024, -0.501617431640625,
      -0.01869248040020466, -0.3172512650489807, -0.7471325397491455,
      0.41161006689071655, 0.19645416736602783, 0.20256689190864563,
      0.1000378429889679, 0.2722637355327606, -0.046572670340538025,
      -0.4124099612236023, 1.207066297531128, -2.5544979572296143,
      0.16554458439350128, 0.7410354018211365, -0.7819026112556458,
      -0.5409929752349854, 0.1405542492866516, -0.05480091646313667,
      -0.1398530900478363, -0.40484675765037537, 0.05157417804002762,
      -0.372039794921875, 0.022501423954963684, -0.17834486067295074,
      -0.14713086187839508, 0.3042662441730499, 0.0012527441140264273,
      0.15461063385009766, 0.31242117285728455, 0.13925276696681976,
      0.43437519669532776, -0.2284107208251953, -0.4699249565601349,
      -0.38506409525871277, 0.8142127990722656, 0.17156216502189636,
      0.04070252180099487, 0.22758829593658447, -0.8665509223937988,
      -0.09448273479938507, 0.40170779824256897, -0.047472238540649414,
      -0.04154045507311821, -0.2242477536201477, -0.3154628276824951,
      0.2483409345149994, -0.9039036631584167, 0.3083183169364929,
      -0.17303848266601562, -0.11428582668304443, -0.7858278155326843,
      0.5111153721809387, -0.18839307129383087, 0.09339312463998795,
      0.4727941155433655, 0.6710556745529175, -0.007578491698950529,
      -0.5426406264305115, -0.16749750077724457, -0.4714142978191376,
      -0.7485637664794922, 0.08411651104688644, -0.3875121772289276,
      0.3083810806274414, 1.2740187644958496, -1.4400571584701538,
      0.2090831696987152, 0.3835270404815674, 0.21079620718955994,
      -0.4238901138305664, -0.8663532137870789, 0.11800292134284973,
      -0.2045576572418213, 0.758252739906311, -0.1445610374212265,
      0.16160885989665985, 0.2611975073814392, 0.5514896512031555,
      0.04313195124268532, 0.8236305713653564, 0.04273051768541336,
      0.19122619926929474, -0.15425722301006317, 1.3965541124343872,
      0.762261152267456, -0.2161676585674286, 0.03794598579406738,
      -0.2824714779853821, -0.06288585066795349, 0.32297781109809875,
      0.2999044358730316, -1.5580079555511475, -0.5755234360694885,
      0.01258887816220522, -1.0681655406951904, 0.16868747770786285,
      0.31469401717185974, -0.40162158012390137, 0.18049725890159607,
      0.26457199454307556, 0.507898211479187, 0.09887021780014038,
      -0.02109629288315773, -0.32426315546035767, 0.098299041390419,
      0.020742807537317276, -0.003228310728445649, -0.14119014143943787,
      0.5708035826683044, 0.015895137563347816, -0.03768689185380936,
      -0.0758047103881836, -0.2883467674255371, -0.2793302834033966,
      -0.5884386897087097, 0.15647676587104797, 0.14586405456066132,
      -0.21081818640232086, -0.2837318181991577, 0.18879735469818115,
      -0.002197881694883108, 0.39860257506370544, 0.28098592162132263,
      -0.04500716179609299, 0.2176627367734909, -0.25044122338294983,
      -0.09663750231266022, -2.070826292037964, -0.027195999398827553,
      0.7804610729217529, -0.21770930290222168, -0.004417337942868471,
      0.1920236349105835, 0.19652530550956726, -0.3713887929916382,
      0.32280847430229187, 0.17201513051986694, 0.35277679562568665,
      0.5720300674438477, -0.36076751351356506, -0.0024847376625984907,
      -0.98975670337677, -0.04007133096456528, 1.1324305534362793,
      0.6622358560562134, -0.6035040020942688, -0.3697148561477661,
      -0.20883256196975708, 1.562727928161621, -0.13073408603668213,
      0.7316587567329407, 0.29597413539886475, 0.1546938717365265,
      0.3673802614212036, -0.5927353501319885, 0.22704066336154938,
      -0.3069724440574646, 0.13371415436267853, -0.5424139499664307,
      -0.17449982464313507, -0.5084201097488403, 0.019890816882252693,
      -0.06760426610708237, 0.10013046115636826, -0.12016816437244415,
      0.05779384449124336, 0.5813302397727966, -0.3486204147338867,
      0.17516784369945526, -0.10246849805116653, 0.2228129506111145,
      -0.3891322612762451, 0.8565249443054199, 0.8094100952148438,
      0.2537887394428253, 0.23837780952453613, -0.14207439124584198,
      -0.2597287595272064, -0.6117645502090454, -0.6454585790634155,
      -9.729318844620138e-05, 1.3498759269714355, 0.7989659905433655,
      0.06861154735088348, -0.11596322804689407, 0.4196729362010956,
      0.5323839783668518, -0.19931145012378693, 0.6498507857322693,
      0.1202394887804985, 0.5535759329795837, 0.4969841539859772,
      -0.060496971011161804, 0.15802189707756042, 0.7941593527793884,
      0.09559472650289536, 0.5403537154197693, -1.1696655750274658,
      0.353358656167984, -0.5055524110794067, -0.5050641894340515,
      -0.9729821085929871, -1.835671067237854, -0.22579635679721832,
      -0.2755131721496582, -0.09559419751167297, 0.7404797673225403,
      -0.6011700630187988, -1.1499816179275513, -0.1516365110874176,
      0.44005224108695984, 0.1939663290977478, -0.08057539165019989,
      -0.2805415987968445, 0.09154347330331802, 0.3905961215496063,
      0.04621065407991409, -0.19060033559799194, 0.3472706377506256,
      -0.05606294423341751, -0.05728062242269516, 0.5606311559677124,
      -0.01987375132739544, -0.2196434736251831, -0.7721633315086365,
      -0.28894391655921936, 0.11651387065649033, -0.3149801790714264,
      -0.6270624399185181, -0.4953562021255493, 0.43016403913497925,
      0.24741315841674805, -0.6328867077827454, -0.0230813417583704,
      0.06905200332403183, -1.3363248109817505, -0.1286991387605667,
      0.7313504815101624, 0.3608357608318329, 0.2514152228832245,
      -0.4082486033439636, -0.12825046479701996, 0.11882760375738144,
      0.09545788913965225, -0.4766637086868286, 0.6467715501785278,
      0.4762454926967621, 0.02474777214229107, 0.12679365277290344,
      -0.4235784411430359, -0.9842735528945923, 0.023074673488736153,
      0.7587025165557861, 0.4857112169265747, 1.6097636222839355,
      0.3765474855899811, -0.49541863799095154, 0.32964444160461426,
      0.30301520228385925, -0.2649085223674774, 0.458631306886673,
      0.44058114290237427, -0.9004233479499817, -0.5940992832183838,
      0.49513134360313416, 0.5577442049980164, -0.09579059481620789,
      -0.03765193000435829, 0.4608005881309509, 0.24364207684993744,
      -0.09624658524990082, -0.05759371444582939, 0.5781034827232361,
      0.2579042613506317, 0.8610361814498901, 0.3893435597419739,
      0.7648326754570007, -0.2288968414068222, -0.61321622133255,
      -0.11236366629600525, 1.2727609872817993, -0.15605223178863525,
      0.18801245093345642, -1.0831137895584106, 0.7660508751869202,
      0.8755171895027161, -0.2177940160036087, 0.07237046957015991,
      0.6014219522476196;

  dense_bias << -0.7305641174316406, 0.12647336721420288, -0.1779327541589737,
      0.32920920848846436, -0.31203794479370117, 0.03401238098740578,
      -0.3266791105270386, -0.02111559361219406, 0.22532592713832855,
      0.23847487568855286, 0.01017957553267479, -0.017231887206435204,
      0.45039817690849304, -0.5586665868759155, -0.2867368757724762,
      -0.035824574530124664, -0.1564522683620453, -0.3645407557487488,
      0.5305793881416321, 0.3320651650428772, -0.14304441213607788,
      0.3888463079929352, -0.3232692778110504, -0.044598110020160675,
      -0.22927840054035187, -0.3027935028076172, -0.22819401323795319;

  return;
}

// Implementation of a 'weighted random selection' algorithm.
// Given a matrix of probabilities (in our case 27x1 shape), and list of
// characters (our vocabulary), the below function randomly selects the next
// character (very similary to Python's random.choices(props,k=1,weights=w))
char randomSelect(const MatrixXd probabilities, const char *chars,
                  int char_size) {
  double totalProb = probabilities.sum();
  double randNum = static_cast<double>(rand()) / RAND_MAX * totalProb;
  for (int i = 0; i < char_size; i++) {
    randNum -= probabilities(i);
    if (randNum <= 0.0) {
      return chars[i];
    }
  }
  return chars[char_size - 1];
}

char make_prediction_np(Eigen::MatrixXd x_input) {
  MatrixXd hidden_state = MatrixXd::Zero(1, 16);
  for (int i = 0; i < 8; i++) {
    Eigen::MatrixXd input = x_input.row(i);
    input.resize(1, 1);
    hidden_state =
        ((input * W_x) + (hidden_state * Wh_x) + (rnn_bias)).array().tanh();
  }
  Eigen::MatrixXd output =
      ((hidden_state * dense_weights) + dense_bias).array().exp();
  output /= output.sum();
  return randomSelect(output, chars, 27);
}

std::string get_output() {
  // define the length of the generated  string
  const int output_length = 16;

  // create a variable to hold the generated output string
  std::string output_str(output_length, ' ');

  // Declare input variable and initialize with some random inputs
  Eigen::MatrixXd x_input(8, 1);
  x_input << 1, 3, 14, 20, 1, 8, 21, 5;
  x_input = x_input / 27.0;

  // let us generate random dinosaur names
  for (int i = 0; i < output_length; i++) {
    // get next predicted character
    char prediction = make_prediction_np(x_input);

    // assign the ith element of output_str with this character
    output_str[i] = prediction;

    // find the index of this character from master list of 'chars' (our
    // vocabulary)
    // shift elements of the input to left, append the index of generated
    // character resize the input to (8,1) this is now the new input to our
    // model
    for (unsigned int j = 0; j < strlen(chars); j++) {
      if (chars[j] == prediction) {
        x_input.conservativeResize(9, 1);
        x_input(8, 0) = j / 27.0;
        // strange as it may look, this is needed
        Eigen::MatrixXd new_matrix = x_input.block(1, 0, 8, 1);
        x_input = new_matrix;
        break;
      }
    }
  }

  return output_str;
}

int main() {
  load_weights();
  stdio_init_all();

  i2c_init(i2c1, 400000);
  gpio_set_function(2, GPIO_FUNC_I2C);
  gpio_set_function(3, GPIO_FUNC_I2C);
  gpio_pull_up(2);
  gpio_pull_up(3);

  ssd1306_t disp;
  disp.external_vcc = false;
  ssd1306_init(&disp, 128, 64, 0x3C, i2c1);

  while (true) {
    std::string output_str = get_output();
    std::size_t pos = output_str.find('\n');
    if (pos != std::string::npos && pos > 5) {
      ssd1306_clear(&disp);
      ssd1306_draw_string(&disp, 8, 24, 1, output_str.substr(0, pos).c_str());
      ssd1306_show(&disp);
      sleep_ms(2500);
    }
  }

  return 0;
}